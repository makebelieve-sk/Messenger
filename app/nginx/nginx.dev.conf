# Главная секция
worker_processes 1;

# Указание на блок событий, который обязателен для работы Nginx
events {
    worker_connections 1024;                        # Указываем количество одновременных соединений, которое может обработать один рабочий процесс
}

# Начало конфигурации сервера nginx
http {
    include       mime.types;                       # Сообщаем nginx включить файл mime.types
    default_type  application/octet-stream;         # Директива типа контента по умолчанию (если nginx не находит тип файла в mime.types)

    # Определяем переменную для заголовка Connection, которая будет равна "upgrade", если в запросе присутствует заголовок Upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ""      close;
    }

    # Блок server на порту 80 (для http - такой порт используется nginx по умолчанию) для перенаправления на https
    server {
        listen 80;                                  # Указываем внутренний порт сервиса nginx в докере для http соединения
        server_name localhost;                      # Указание имени хоста (страница будет доступна в браузере по этому хосту)

        return 301 https://$host$request_uri;       # Всё на HTTPS с сохранением URI
    }

    # Блок server на порту 80 (для http) для обработки запросов
    server {
        listen 443 ssl;                             # Указываем внутренний порт сервиса nginx в докере для https соединения

        ssl_certificate     /etc/nginx/certs/localhost.pem;     # Указываем путь к сертификату (сертификаты для development режима)
        ssl_certificate_key /etc/nginx/certs/localhost-key.pem; # Указываем путь к ключу (сертификаты для development режима)

        server_name localhost;                      # Указание имени хоста (страница будет доступна в браузере по этому хосту)

        # Отдаём статические файлы (React). То есть страницы html, согласно адресам, установленным в адресную строку браузера
        location / {
            autoindex on;
            autoindex_exact_size off;
            autoindex_localtime on;
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;

            # Включаем кэширование статики
            location ~* \.(?:ico|css|js|gif|jpe?g|png|woff2?|eot|ttf|otf|svg)$ {
                expires 6M;                         # Устанавливаем срок хранения кеша в 6 месяцев
                access_log off;                     # Отключаем запись логов к этим закешированным файлам
                add_header Cache-Control "public";  # Добавляем заголовок Cache-Control со значением public, что разрешает кеширование файлов всеми пользователями
            }
        }

        # Проксирование сокет-соединения с браузера на сервер через nginx
        location /socket.io/ {
            proxy_pass https://server:5050/socket.io/;                            # Имя контейнера сервера (внутренний порт)

            proxy_http_version 1.1;                                               # Используем HTTP 1.1 для поддержки WebSockets

            proxy_set_header Upgrade $http_upgrade;                               # Устанавливаем заголовок Upgrade для WebSocket-соединения
            proxy_set_header Connection $connection_upgrade;                      # Обеспечиваем корректное обновление соединения
            proxy_set_header Host $host;                                          # Передаём оригинальный заголовок Host
            proxy_set_header X-Real-IP $remote_addr;                              # Передаём реальный IP-адрес клиента
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;          # Передаём цепочку IP-адресов для логирования

            # Отключаем проверку самоподписанного сертификата сервера (только для дев режима, так как сертификаты mkcert):
            proxy_ssl_verify       off;
            proxy_ssl_server_name  on;

            proxy_read_timeout 86400;                                             # Таймаут чтения ответа от upstream (для долгоживущих соединений)
        }

        # Проксирование HTTP запросов с браузера на сервер через nginx
        location /api/ {
            proxy_pass https://server:5050/;                                       # Имя контейнера сервера (внутренний порт)

            proxy_set_header Host $host;                                          # Установка заголовка Host в запросе
            proxy_set_header X-Real-IP $remote_addr;                              # Установка заголовка X-Real-IP (реальный IP-адрес) в запросе
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;          # Установка заголовка X-Forwarded-For (передача используемых прокси-серверов) в запросе
            proxy_set_header X-Forwarded-Proto $scheme;                           # Установка заголовка X-Forwarded-Proto (какой протокол используется - http или https) в запросе

            # Отключаем проверку самоподписанного сертификата сервера (только для дев режима, так как сертификаты mkcert):
            proxy_ssl_verify       off;
            proxy_ssl_server_name  on;
            
            # Заголовки для CORS
            add_header Access-Control-Allow-Origin "https://localhost:5000";       # Адрес клиента
            add_header Access-Control-Allow-Credentials true;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, application/json";

            # Для кук
            add_header Set-Cookie "Secure; HttpOnly; SameSite=None";              # Обработка Set-Cookie

            # Добавляем лимит в 10 МБ (в основном для файлов, на сервере есть multer с ограничением в 10 МБ)
            # По умолчанию 1 МБ. При превышении лимита отправляется 413 статус (переопределить нельзя)
            client_max_body_size 10M;

            # Обработка pre-flight запросов (OPTIONS)
            if ($request_method = "OPTIONS") {
                add_header Access-Control-Allow-Origin "https://localhost:5000";
                add_header Access-Control-Allow-Credentials true;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                return 204;
            }
        }

        # Включаем Gzip для уменьшения размера файлов
        gzip on;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
        gzip_vary on;
    }
}