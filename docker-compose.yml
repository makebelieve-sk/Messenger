# Наименование проекта (автоматически добавляется как префикс для всех контейнеров)
name: "messanger"

# Список сервисов, запускаемых каждый в своем отдельном докер контейнере
services:
  # Сервис MS SQL Server
  mssql:
    build:
      context: ./deploy                   # Путь к папке, где лежит Dockerfile.mssql
      dockerfile: Dockerfile.mssql        # Наименование файла конфигурации докера для mssql (происходит его автоматический запуск)
    container_name: mssql                 # Наименование контейнера сервера mssql (для последующей отладки)
    environment:                          # Переменные окружения (передаются в контейнер, но остаются и видны в логах контейнера - небезопасно, лучше использовать специализированный инструмент - например, Docker Secrets)
      - ACCEPT_EULA=Y                     # Обязательное принятие лицензионного соглашения
    ports:
      - "1533:1433"                       # Указываем соответствие между портами: (внешний порт контейнера 1533, но если что - укажем отличный от 1433, так как он может быть занят), 1433 - внутренний порт контейнера
    networks:
      - app_network                       # Указываем способ общения с другими сервисами
    secrets:
      - sa_password                       # Определяет секрет и указывает путь к файлу, содержащему секрет
    env_file:
      - ./server/.env                     # Копируем .env файлы. Для сервиса MS SQL Server они необходимы для замены переменных окружения в init.sql (см. ниже)
      - ./server/.env.production
    volumes:
      - ./deploy/entrypoint-mssql.sh:/docker-entrypoint-initdb.d/entrypoint-mssql.sh  # Исполняемый скрипт .sh, который прокидывает .env переменные в init.sql (см. ниже)
      - ./deploy/check-mssql-health.sh:/docker-entrypoint-initdb.d/check-mssql-health.sh # Исполняемый скрипт .sh, который проверяет здоровье сервера MSSQL
      - mssql_data:/var/opt/mssql         # Указываем путь к папке с данными БД (в данном случае это папка с данными на хосте). Необходимо для того, чтобы данные не терялись при перезапуске контейнера. Создается автоматически официальным образом MSSQL в папку на хосте (то есть в докер контейнере) в папке /var/opt/mssql
    entrypoint: ["/bin/bash", "/docker-entrypoint-initdb.d/entrypoint-mssql.sh"] # При запуске контейнера выполняется данный sh скрипт
    restart: on-failure                   # Перезапускать контейнер только в случаях возникновения ошибок (Количество перезапуском невозможно ограничить в Docker compose - зато можно в Docker Swarm - это оркестратор, как Ansible/Kubernetes)
    healthcheck:                          # Проверка здоровья контейнера
      test: ["CMD", "/docker-entrypoint-initdb.d/check-mssql-health.sh"] # Эта команда вызывает наш пользовательский файл проверки здоровья контейнера
      interval: 30s                       # Интервал между проверками
      timeout: 10s                        # Максимальное время выполнения проверки
      retries: 3                          # Количество неудачных попыток, после которых контейнер считается нездоровым
      start_period: 10s                   # Время, которое должно пройти после запуска контейнера, прежде чем будет выполнена первая проверка

  # Сервис Adminer (Мониторинг MS SQL Server). При входе необходимо указывать в поле "Сервер" значение mssql. Единственный минус - не показывает id записей и внешних ключей.
  adminer:
    image: adminer:latest                 # Указываем официальный образ Adminer
    container_name: mssql_adminer         # Наименование контейнера докера на мониторинге MS SQL Server (для последующей отладки)
    ports:
      - "8000:8080"                       # Указываем соответствие между портами: (внешний порт контейнера 8000), 8080 - внутренний порт контейнера
    depends_on:                           # Указываем порядок запуска сервисов (но это не 100% гарантия запуска, но не готовности контейнеров - кроме исключения: condition: service_healthy)
      mssql:                              # Запускаем данный сервис только после успешного запуска сервиса mssql
        condition: service_healthy        # depends_on с condition: service_healthy: Гарантирует, что сервис adminer будет запущен только после того, как mssql пройдет все проверки здоровья и будет считаться "здоровым"
    networks:
      - app_network                       # Указываем способ общения с другими сервисами
    restart: on-failure                   # Перезапускать контейнер только в случаях возникновения ошибок (Количество перезапуском невозможно ограничить в Docker compose - зато можно в Docker Swarm - это оркестратор, как Ansible/Kubernetes)

  # Сервис Redis
  redis:
    image: redis:latest                   # Указываем официальный образ Redis
    container_name: redis                 # Наименование контейнера сервера докера (для последующей отладки)
    ports:
      - "6380:6379"                       # Указываем соответствие между портами: (внешний порт контейнера 6380, но если что - укажем отличный от 6379, так как он может быть занят), 6379 - внутренний порт контейнера
    networks:
      - app_network                       # Указываем способ общения с другими сервисами
    volumes:
      - ./deploy/redis.conf:/usr/local/etc/redis/redis.conf # Указываем путь к конфигурационному файлу редиса
      - redis_data:/data                  # Указываем путь к папке с данными редиса (в данном случае это папка с данными на хосте). Необходимо для того, чтобы данные не терялись при перезапуске контейнера. Создается автоматически официальным образом Redis в папку на хосте (то есть в докер контейнере) в папке data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"] # Указывает Redis использовать конфигурационный файл при запуске. Это заменяет стандартную команду запуска Redis, чтобы он использовал наш конфигурационный файл
    restart: on-failure                   # Перезапускать контейнер только в случаях возникновения ошибок (Количество перезапуском невозможно ограничить в Docker compose - зато можно в Docker Swarm - это оркестратор, как Ansible/Kubernetes)
    healthcheck:                          # Проверка здоровья контейнера
      test: ["CMD", "redis-cli", "ping"]  # Эта команда отправляет PING к Redis, и если Redis отвечает PONG, то проверка считается успешной
      interval: 10s                       # Интервал между проверками
      timeout: 5s                         # Максимальное время выполнения проверки
      retries: 3                          # Количество неудачных попыток, после которых контейнер считается нездоровым
      start_period: 10s                   # Время, которое должно пройти после запуска контейнера, прежде чем будет выполнена первая проверка

  # Сервис RedisInsight (Мониторинг Redis)
  redisinsight:
    build:
      context: ./deploy                   # Путь к папке, где лежит Dockerfile.redisinsight
      dockerfile: Dockerfile.redisinsight # Наименование файла конфигурации докера для redisinsight (происходит его автоматический запуск)
    container_name: redis_insight         # Наименование контейнера докера на мониторинге Redis (для последующей отладки)
    ports:
      - "5540:5540"                       # Указываем соответствие между портами: (внешний порт контейнера 5540), 5540 - внутренний порт контейнера  
    networks:
      - app_network                       # Указываем способ общения с другими сервисами
    volumes:
      - redis-insight:/data
    restart: on-failure                   # Перезапускать контейнер только в случаях возникновения ошибок (Количество перезапуском невозможно ограничить в Docker compose - зато можно в Docker Swarm - это оркестратор, как Ansible/Kubernetes)
    depends_on:                           # Указываем порядок запуска сервисов (но это не 100% гарантия запуска, но не готовности контейнеров - кроме исключения: condition: service_healthy)
      redis:                              # Запускаем данный сервис только после успешного запуска сервиса redis
        condition: service_healthy        # depends_on с condition: service_healthy: Гарантирует, что сервис redisinsight будет запущен только после того, как redis пройдет все проверки здоровья и будет считаться "здоровым"
    healthcheck:                          # Проверка здоровья контейнера
      test: ["CMD", "curl", "-f", "http://localhost:5540/api/health"] # Эта команда отправляет запрос к RedisInsight, и если он отвечает со статусом 200, то проверка считается успешной
      interval: 30s                       # Интервал между проверками
      timeout: 10s                        # Максимальное время выполнения проверки
      retries: 3                          # Количество неудачных попыток, после которых контейнер считается нездоровым
      start_period: 10s                   # Время, которое должно пройти после запуска контейнера, прежде чем будет выполнена первая проверка

  # Сервис сервера (запускает файл конфигурации в папке server/Dockerfile)
  server:
    build:
      context: .                          # Указываем текущую рабочую директорию. Необходимо, чтобы можно было без проблем копировать отдельные модули папки packages
      dockerfile: server/Dockerfile       # Наименование файла конфигурации докера на сервере (происходит его автоматический запуск)
    container_name: server                # Наименование контейнера докера на сервере (для последующей отладки)
    ports:
      - "5051:5050"                       # Указываем соответствие между портами: 5051 (внешний порт сервера), 5050 - внутренний порт контейнера
    networks:
      - app_network                       # Указываем способ общения с другими сервисами
    env_file:
      - ./server/.env                     # Копируем .env файлы (также их можно копировать в Dockerfile, но тогда они будут зашиты в образ сборки докера)
      - ./server/.env.production          # В данном случае мы можем с легкостью менять env переменные в файлах и только перезапускать сервис (пересборки образа не будет)
    environment:
      - NODE_ENV=production               # Указываем переменную NODE_ENV (она указывается в package.json при команде npm run build + её необходимо указать для других npm пакетов)
    depends_on:                           # Указываем порядок запуска сервисов (но это не 100% гарантия запуска, но не готовности контейнеров - кроме исключения: condition: service_healthy)
      mssql:
        condition: service_healthy        # depends_on с condition: service_healthy: Гарантирует, что сервис server будет запущен только после того, как mssql пройдет все проверки здоровья и будет считаться "здоровым"
      redis:                              # Запускаем данный сервис только после успешного запуска сервиса redis
        condition: service_healthy        # depends_on с condition: service_healthy: Гарантирует, что сервис server будет запущен только после того, как redis пройдет все проверки здоровья и будет считаться "здоровым"
      redisinsight:                       # Запускаем данный сервис только после успешного запуска сервиса redisinsight
        condition: service_healthy        # depends_on с condition: service_healthy: Гарантирует, что сервис server будет запущен только после того, как redis пройдет все проверки здоровья и будет считаться "здоровым"
    restart: on-failure                   # Перезапускать контейнер только в случаях возникновения ошибок (Количество перезапуском невозможно ограничить в Docker compose - зато можно в Docker Swarm - это оркестратор, как Ansible/Kubernetes)
    healthcheck:                          # Проверка здоровья контейнера
      test: ["CMD", "curl", "-f", "http://localhost:5050/check-health"] # Эта команда отправляет запрос к серверу, и если он отвечает со статусом 204, то проверка считается успешной
      interval: 30s                       # Интервал между проверками
      timeout: 10s                        # Максимальное время выполнения проверки
      retries: 3                          # Количество неудачных попыток, после которых контейнер считается нездоровым
      start_period: 10s                   # Время, которое должно пройти после запуска контейнера, прежде чем будет выполнена первая проверка

  # Сервис балансировщика nginx
  nginx:
    build:
      context: .                          # Указываем текущую рабочую директорию. Необходимо, чтобы можно было без проблем копировать отдельные модули папки packages
      dockerfile: app/Dockerfile          # Наименование файла конфигурации докера на клиенте (происходит его автоматический запуск)
    container_name: nginx                 # Наименование контейнера докера на клиенте (для последующей отладки)
    ports:
      - "5000:80"                         # Указываем соответствие между портами: 5000 (внешний порт nginx), 80 - внутренний порт контейнера - для http соединения
    networks:
      - app_network                       # Указываем способ общения с другими сервисами
    restart: on-failure                   # Перезапускать контейнер только в случаях возникновения ошибок (Количество перезапуском невозможно ограничить в Docker compose - зато можно в Docker Swarm - это оркестратор, как Ansible/Kubernetes)
    depends_on:                           # Указываем порядок запуска сервисов (но это не 100% гарантия запуска, но не готовности контейнеров - кроме исключения: condition: service_healthy)
      server:                             # Запускаем данный сервис только после успешного запуска сервиса server
        condition: service_healthy        # depends_on с condition: service_healthy: Гарантирует, что сервис nginx будет запущен только после того, как redis пройдет все проверки здоровья и будет считаться "здоровым"

# Данное поле необходимо для установки общения между сервисами
networks:
  app_network:
    driver: bridge                        # Создает изолированную сеть

# Данное поле необходимо для создания папки с данными на хосте в которых будут храниться данные редиса и mssql
volumes:
  mssql_data:
  redis_data:
  redis-insight:

# Данное поле необходимо для создания секретов (максимально защищенный способ хранения переменных)
secrets:
  sa_password:
    file: ./deploy/sa_password.txt